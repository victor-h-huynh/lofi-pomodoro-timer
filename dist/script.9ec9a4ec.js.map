{"version":3,"sources":["script.js"],"names":["timerId","sessionsContainer","document","querySelector","controlsContainer","sessionsTab","querySelectorAll","pomodoroBtn","shortBtn","longBtn","startBtn","resetBtn","timer","sessionCounter","previousBtn","nextVideoBtn","audioElement","mainElement","SESSIONS","POMODORO","SHORT_BREAK","LONG_BREAK","TIME_STRING","TIME","counter","session","time","started","startTimerInterval","setInterval","mins","String","Math","trunc","padStart","secs","innerHTML","console","log","clearInterval","alarm","stopVideo","changeSession","newSession","startTimer","stopTimer","resetTimer","onPlayerReady","player","loadPlaylist","pauseVideo","playVideo","setVolume","previousVideo","nextVideo","volume","play","resetAlarm","currentTime","pause","addEventListener","e","stopPropagation","clicked","target","closest","forEach","t","classList","remove","add","changeBackground","count","backgroundNumber","setAttribute","tag","createElement","src","firstScriptTag","getElementsByTagName","onYouTubeIframeAPIReady","YT","Player","height","width","videoId","playerVars","playsinline","rel","events","onReady","parentNode","insertBefore"],"mappings":"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","file":"script.9ec9a4ec.js","sourceRoot":"..","sourcesContent":["\"use strict\";\r\n\r\n/////////////////////////////////////////////////////////////////////\r\n// Elements\r\nconst sessionsContainer = document.querySelector(\".container__sessions\");\r\nconst controlsContainer = document.querySelector(\".container__controls\");\r\nconst sessionsTab = document.querySelectorAll(\".btn--sessions\");\r\nconst pomodoroBtn = document.querySelector(\".btn--pomodoro\");\r\nconst shortBtn = document.querySelector(\".btn--short\");\r\nconst longBtn = document.querySelector(\".btn--long\");\r\nconst startBtn = document.querySelector(\".btn--start\");\r\nconst resetBtn = document.querySelector(\".btn--reset\");\r\nconst timer = document.querySelector(\".timer\");\r\nconst sessionCounter = document.querySelector(\".session__counter\");\r\nconst previousBtn = document.querySelector(\".btn--previousVideo\");\r\nconst nextVideoBtn = document.querySelector(\".btn--nextVideo\");\r\nconst audioElement = document.querySelector(\".audioElement\");\r\nconst mainElement = document.querySelector(\".app\");\r\n\r\n// enums\r\nconst SESSIONS = {\r\n  POMODORO: \"POMODORO\",\r\n  SHORT_BREAK: \"SHORT_BREAK\",\r\n  LONG_BREAK: \"LONG_BREAK\",\r\n};\r\n\r\nconst TIME_STRING = {\r\n  POMODORO: \"25:00\",\r\n  SHORT_BREAK: \"05:00\",\r\n  LONG_BREAK: \"10:00\",\r\n};\r\n\r\nconst TIME = {\r\n  POMODORO: 1500 - 1,\r\n  SHORT_BREAK: 300 - 1,\r\n  LONG_BREAK: 600 - 1,\r\n};\r\n\r\nlet timerId;\r\nlet counter = 0;\r\nlet session = SESSIONS.POMODORO;\r\nlet time = TIME[session];\r\nlet started = false;\r\n\r\n/////////////////////////////////////////////////////////////////////\r\n// Functions For Timer\r\nconst startTimerInterval = function () {\r\n  const timerId = setInterval(() => {\r\n    let mins = String(Math.trunc(time / 60)).padStart(2, 0);\r\n    let secs = String(time % 60).padStart(2, 0);\r\n\r\n    if (secs === 0 && mins > 0) {\r\n      mins--;\r\n      secs--;\r\n    } else {\r\n      time--;\r\n    }\r\n\r\n    timer.innerHTML = `${mins}:${secs}`;\r\n    console.log(mins, secs, time);\r\n    if (time === -1 && session === \"POMODORO\") {\r\n      clearInterval(timerId);\r\n      alarm();\r\n      stopVideo();\r\n      counter++;\r\n      sessionCounter.innerHTML = `Session counter: ${counter}`;\r\n    }\r\n\r\n    if (time === -1) {\r\n      clearInterval(timerId);\r\n    }\r\n  }, 1000);\r\n\r\n  return timerId;\r\n};\r\n\r\nfunction changeSession(newSession) {\r\n  session = newSession;\r\n  time = TIME[newSession];\r\n  timer.innerHTML = TIME_STRING[newSession];\r\n  started = false;\r\n  startBtn.innerHTML = \"play_arrow\";\r\n}\r\n\r\nfunction startTimer() {\r\n  started = true;\r\n  startBtn.innerHTML = \"pause\";\r\n  timerId = startTimerInterval();\r\n  // SET TIME TO 10 SECONDS TEST\r\n  // time = 10;\r\n}\r\n\r\nfunction stopTimer() {\r\n  started = false;\r\n  startBtn.innerHTML = \"play_arrow\";\r\n  clearInterval(timerId);\r\n}\r\n\r\nfunction resetTimer() {\r\n  startBtn.innerHTML = \"play_arrow\";\r\n  clearInterval(timerId);\r\n  changeSession(session);\r\n}\r\n\r\n/////////////////////////////////////////////////////////////////////\r\n// Event Handlers\r\n\r\n// Sessions Container\r\nsessionsContainer.addEventListener(\"click\", function (e) {\r\n  e.stopPropagation();\r\n  const clicked = e.target.closest(\".btn--sessions\");\r\n\r\n  // Guard clause\r\n  if (!clicked) return;\r\n\r\n  // Remove active classes\r\n  sessionsTab.forEach((t) => t.classList.remove(\"active\"));\r\n\r\n  // Active Tab\r\n  clicked.classList.add(\"active\");\r\n});\r\n\r\n// Pomodoro Button\r\npomodoroBtn.addEventListener(\"click\", function () {\r\n  changeSession(SESSIONS.POMODORO);\r\n  clearInterval(timerId);\r\n});\r\n\r\n// Short Break Button\r\nshortBtn.addEventListener(\"click\", function () {\r\n  changeSession(SESSIONS.SHORT_BREAK);\r\n  clearInterval(timerId);\r\n});\r\n\r\n// Long Break Button\r\nlongBtn.addEventListener(\"click\", function () {\r\n  changeSession(SESSIONS.LONG_BREAK);\r\n  clearInterval(timerId);\r\n});\r\n\r\n// Controls Container\r\ncontrolsContainer.addEventListener(\"click\", function (e) {\r\n  e.stopPropagation();\r\n});\r\n\r\n// Start Button\r\nstartBtn.addEventListener(\"click\", function () {\r\n  started\r\n    ? (stopTimer(), stopVideo())\r\n    : (startTimer(), playVideo(), setVolume());\r\n});\r\n\r\n// Reset Button\r\nresetBtn.addEventListener(\"click\", function () {\r\n  resetTimer();\r\n  stopVideo();\r\n  resetAlarm();\r\n});\r\n\r\n// Previous Video Button\r\npreviousBtn.addEventListener(\"click\", function () {\r\n  previousVideo();\r\n});\r\n\r\n// Next Video Button\r\nnextVideoBtn.addEventListener(\"click\", function () {\r\n  nextVideo();\r\n});\r\n\r\nmainElement.addEventListener(\"click\", function (e) {\r\n  changeBackground();\r\n});\r\n\r\n/////////////////////////////////////////////////////////////////////\r\n// Functions For YouTube\r\n\r\n// 3. The API will call this function when the video player is ready.\r\nfunction onPlayerReady() {\r\n  player.loadPlaylist([\"kgx4WGK0oNU\", \"-5KAN9_CzSA\", \"l7TxwBhtTUY\"]);\r\n}\r\n\r\nfunction pauseVideo() {\r\n  player.pauseVideo();\r\n}\r\n\r\nfunction playVideo() {\r\n  player.playVideo();\r\n}\r\n\r\nfunction stopVideo() {\r\n  player.stopVideo();\r\n}\r\n\r\nfunction setVolume() {\r\n  player.setVolume(10);\r\n}\r\n\r\nfunction previousVideo() {\r\n  player.previousVideo();\r\n}\r\n\r\nfunction nextVideo() {\r\n  player.nextVideo();\r\n}\r\n\r\n// PLAYER FUNCTION NOT IN USE\r\n// function getPlayerState() {\r\n//   return player.getPlayerState();\r\n// }\r\n\r\n/////////////////////////////////////////////////////////////////////\r\n// Functions For Alarm\r\n\r\nfunction alarm() {\r\n  audioElement.volume = 0.05;\r\n  audioElement.play();\r\n}\r\n\r\nfunction resetAlarm() {\r\n  audioElement.currentTime = 0;\r\n  audioElement.pause();\r\n}\r\n\r\n/////////////////////////////////////////////////////////////////////\r\n// Functions For Background\r\n\r\nlet count = 1;\r\nfunction changeBackground() {\r\n  // let backgroundNumber = Math.trunc(Math.random() * 4);\r\n  let backgroundNumber = count % 25;\r\n  count++;\r\n  // mainElement.style.backgroundImage = `url(../static/background${backgroundNumber}.gif)`;\r\n\r\n  mainElement.setAttribute(\r\n    \"style\",\r\n    `background-image: url(./static/background${backgroundNumber}.gif)`\r\n  );\r\n}\r\n\r\n/////////////////////////////////////////////////////////////////////\r\n// YouTube Script\r\n\r\n// 1. This code loads the IFrame Player API code asynchronously.\r\nvar tag = document.createElement(\"script\");\r\n\r\ntag.src = \"https://www.youtube.com/iframe_api\";\r\nvar firstScriptTag = document.getElementsByTagName(\"script\")[0];\r\nfirstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\r\n\r\n// 2. This function creates an <iframe> (and YouTube player)\r\n//    after the API code downloads.\r\nvar player;\r\nfunction onYouTubeIframeAPIReady() {\r\n  player = new YT.Player(\"player\", {\r\n    height: \"390\",\r\n    width: \"640\",\r\n    videoId: \"kgx4WGK0oNU\",\r\n    playerVars: {\r\n      playsinline: 1,\r\n      rel: 0,\r\n    },\r\n    events: {\r\n      onReady: onPlayerReady,\r\n    },\r\n  });\r\n}\r\n\r\n// Features\r\n// Don't repeat background\r\n"]}